{"version":3,"sources":["../../src/sls/api.js"],"names":["ListCategory","ProjectName","fn","requestData","Project","ListTopic","opt","Category","Token","Lines","GetData","GetDataMeta"],"mappings":"AAAA;;;;;;;;+BAEe;;AAEX;;;;;AAKAA,8BAAc,sBAAUC,WAAV,EAAuBC,EAAvB,EAA2B;AACrC,yBAAKC,WAAL,CAAiB,KAAjB,EAAwB,eAAxB,EAAyC,EAAzC,EAA6C;AACzCC,iCAASH;AADgC,qBAA7C,EAEGC,EAFH;AAGH,iBAXU;;AAaX;;;;;;;AAOAG,2BAAW,mBAAUJ,WAAV,EAAuBK,GAAvB,EAA4BJ,EAA5B,EAAgC;;AAEvC,yBAAKC,WAAL,CAAiB,KAAjB,EAAwB,YAAxB,EAAsC,EAAtC,EAA0C;AACtCC,iCAASH,WAD6B;AAEtCM,kCAAUD,IAAIC,QAFwB;AAGtCC,+BAAOF,IAAIE,KAH2B;AAItCC,+BAAOH,IAAIG,KAAJ,IAAW;AAJoB,qBAA1C,EAKGP,EALH;AAMH,iBA5BU;;AA8BX;;;;;;;;;;;;;;;AAeAQ,yBAAS,iBAAUT,WAAV,EAAuBK,GAAvB,EAA4BJ,EAA5B,EAAgC;AACrCI,wBAAIF,OAAJ,GAAcH,WAAd;AACA,yBAAKE,WAAL,CAAiB,KAAjB,EAAwB,UAAxB,EAAoC,EAApC,EAAwCG,GAAxC,EAA6CJ,EAA7C;AACH,iBAhDU;;AAkDX;;;;;;;;;;;AAWAS,6BAAa,qBAAUV,WAAV,EAAuBK,GAAvB,EAA4BJ,EAA5B,EAAgC;AACzCI,wBAAIF,OAAJ,GAAcH,WAAd;AACA,yBAAKE,WAAL,CAAiB,KAAjB,EAAwB,cAAxB,EAAwC,EAAxC,EAA4CG,GAA5C,EAAiDJ,EAAjD;AACH;;AAhEU,a","file":"api.js","sourcesContent":["\"use strict\";\n\nexport default {\n\n    /**\n     * ListCategory\n     * @param {String} ProjectName Project 名称,全局唯一\n     * @param {Function} fn callback function, fn(err, data, status, headers)\n     */\n    ListCategory: function (ProjectName, fn) {\n        this.requestData('GET', '/ListCategory', {}, {\n            Project: ProjectName\n        }, fn);\n    },\n\n    /**\n     * ListTopic\n     * @param {String} ProjectName Project 名称,全局唯一\n     * @param {Object} opt\n     * @param {String} opt.Category 必选, 日志类型（用户所有日志类型可以通过 ListCategory 获得）\n     * @param {Function} fn callback function, fn(err, data, status, headers)\n     */\n    ListTopic: function (ProjectName, opt, fn) {\n\n        this.requestData('GET', '/ListTopic', {}, {\n            Project: ProjectName,\n            Category: opt.Category,\n            Token: opt.Token,\n            Lines: opt.Lines||200\n        }, fn);\n    },\n\n    /**\n     * GetData\n     * @param {String} ProjectName Project 名称,全局唯一\n     * @param {Object} opt\n     * @param {String} opt.Category 必选, 日志类型（用户所有日志类型可以通过 ListCategory 获得）\n     * @param {String} opt.Topic  可选, 指定日志主题（用户所有主题可以通过 ListTopic 获得）\n     * @param {Integer} opt.BeginTime 必选, 开始时间（精确到秒，使用 linux 累计时间格式）\n     * @param {Integer} opt.EndTime  可选, 结束时间（精确到秒，使用 linux 累计时间格式）\n     * @param {boolean} opt.Reverse 可选, 是否反向读取，只能为 true 或者 false，不区分大小写\n     *                 （默认 false，为正向读取，即从 BeginTime 开始到 EndTime 之间读取 Lines 条）\n     * @param {Integer} opt.Lines  可选, 读取的行数，默认值为 200\n     * @param {Integer} opt.Offset  可选, 读取起始位置，默认值为 0\n     * @param {String} opt.Query 可选, 查询的关键词，不输入关键词，则查询全部日志数据\n     * @param {Function} fn callback function, fn(err, data, status, headers)\n     */\n    GetData: function (ProjectName, opt, fn) {\n        opt.Project = ProjectName;\n        this.requestData('GET', '/GetData', {}, opt, fn);\n    },\n\n    /**\n     * GetDataMeta\n     * @param {String} ProjectName Project 名称,全局唯一\n     * @param {Object} opt\n     * @param {String} opt.Category 必选, 日志类型（用户所有日志类型可以通过 ListCategory 获得）\n     * @param {String} opt.Topic  可选, 指定日志主题（用户所有主题可以通过 ListTopic 获得）\n     * @param {Integer} opt.BeginTime 必选, 开始时间（精确到秒，使用 linux 累计时间格式）\n     * @param {Integer} opt.EndTime  可选, 结束时间（精确到秒，使用 linux 累计时间格式）\n     * @param {String} opt.Query 可选, 查询的关键词，不输入关键词，则查询全部日志数据\n     * @param {Function} fn callback function, fn(err, data, status, headers)\n     */\n    GetDataMeta: function (ProjectName, opt, fn) {\n        opt.Project = ProjectName;\n        this.requestData('GET', '/GetDataMeta', {}, opt, fn);\n    },\n\n};\n"]}